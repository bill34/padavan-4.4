name: build

on: 
#  push:
#    branches:
#    - "*"
  workflow_dispatch:
    inputs:
      target:
        type: choice
        description: 'Please select the model to compile'
        options:
        - 'B70'
        - 'BELL-A040WQ'
        - 'CR660x'
        - 'DIR-878'
        - 'DIR-882'
        - 'EA7500'
        - 'E8820V2'
        - 'GHL'
        - 'JCG-836PRO'
        - 'JCG-AC860M'
        - 'JCG-Q20-PB'
        - 'JCG-Q20'
        - 'JCG-Y2'
        - 'K2P-USB'
        - 'K2P-NANO'
        - 'K2P'
        - 'MI-4'
        - 'MI-R3G'
        - 'MI-R3P-PB'
        - 'MI-R3P-SPI'
        - 'MI-R3P'
        - 'MI-R4A'
        - 'MR2600'
        - 'MSG1500'
        - 'MSG1500-Z'
        - 'NETGEAR-BZV'
        - 'NEWIFI'
        - 'NEWIFI3'
        - 'QM-B1'
        - 'R2100'
        - 'R6800'
        - 'RE-CP-02'
        - 'RM2100'
        - 'RT-AC85P'
        - 'TX1801'
        - 'WR1200JS'
        - 'XY-C1'
        - 'ZTE-E8820S'
        - 'WE410443-TC'
        default: 'K2P'
      release:
        type: boolean
        description: 'upload to release'
        default: 'true'
jobs:
  build:
    name: build
    runs-on: ubuntu-20.04
    if: ${{ !(github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) }}
    env:
      build_variant: ${{ matrix.build_variant }}
      targets: ${{ matrix.targets }}
      images_dir: /opt/images
    strategy:
      matrix:
        include:
          - build_variant: "mt7621"
            targets: "WR1200JS K2P DIR-878 CR660x JCG-Q20 MI-4"
          - build_variant: "mt7621-usb-1"
            targets: "XY-C1 JCG-836PRO JCG-Y2 NEWIFI ZTE-E8820S B70"
          - build_variant: "mt7621-usb-2"
            targets: "MI-R3G JCG-AC860M NETGEAR-BZV MI-R3P R2100 RM2100 MSG1500 BELL-A040WQ"
    steps:
      - uses: actions/checkout@v2
      - name: Prepare environment
        run: |
          sudo apt update
          sudo apt install libtool-bin gperf python3-docutils autopoint gettext
      - name: Run shellcheck
        run: sh ./trunk/tools/shellcheck.sh
      - name: Prepare toolchain
        run: |
          cd toolchain-mipsel
          sh dl_toolchain.sh
      - name: Start build
        run: |
          cd trunk
          mkdir -p ${images_dir}
          for m in $targets; do fakeroot ./build_firmware_ci $m; \
          if [ $? = 0 ]; then cp -f images/*.trx ${images_dir}/$m.trx; else exit 1; fi; \
          ./clear_tree_simple >/dev/null 2>&1; done
      - name: Create archive
        if: ${{ github.event_name != 'release' && success() }}
        run: |
          ls -lh ${images_dir}
          GIT_VERSION=`git rev-parse --short=7 HEAD 2>/dev/null` && [ -n "$GIT_VERSION" ] && \
          image_name=images_${build_variant}_${GIT_VERSION} || image_name=images_${build_variant}
          cd ${images_dir}; md5sum *.trx |tee md5sum.txt; 7z a -mx=9 ${image_name}.7z ./*
          echo "image_name=${image_name}" >> $GITHUB_ENV
      - name: Upload images to Artifact
        if: ${{ github.event_name != 'release' && success() }}
        uses: actions/upload-artifact@v2.2.1
        with:
          name: ${{ env.image_name }}
          path: ${{ env.images_dir }}/*.7z
      - name: Upload firmware to WeTransfer
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress /opt/images/*.trx 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
      - name: Upload images to Releases
        if: ${{ github.event_name == 'release' && success() }}
        uses: svenstaro/upload-release-action@2.2.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.images_dir }}/*.trx
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
